#!/usr/bin/python
# TODO:
#   * Handle floats
#   * Use delimieter other than ','
#   * avg / median instead of sum
#   * --strict: warn/error if number of cells for lines mismatch or there's a null cell.
#   * -F,--ifs : set Input Field Separator
#   * --ofs    : set Output Field Separator
#   * --pretty : human readable output

import sys

def sumarrays(*arrays):
    ret = []
    for ary in map(None, *arrays):
        ret.append( sum( filter(lambda x: x is not None, ary) ) )
    return ret

def myint(x):
    if x == '':
        return 0
    else:
        return int(x)


def add(i, o):
    """ So this is the test
    >>> import StringIO
    >>> i1 = StringIO.StringIO()
    >>> i1.write('1,2,3\\n')
    >>> i1.write('4,5,6\\n')
    >>> add(i1, sys.stdout)
    5,7,9
    """
    # if any of cell in the first line, except left-most cell, contains anything
    # other than number, consider it as a header line.
    line = i.readline().rstrip()
    if all([ x.isdigit() for x in line.split(',')[1:] ]):
        header = None
    else:
        header = line
        line = i.readline().rstrip()

    # if first cell of the first data row contains non-number char
    # consider it as a attribute name and sum numbers for each of
    # the attribute. Else, just sum up all the cells in columns.
    if (line.split(',')[0]).isdigit():
        sums = []
    else:
        sums = {}


    while line:
        cols = line.split(',')
        if isinstance(sums,dict):
            if cols[0] in sums:
                sums[cols[0]] = sumarrays(sums[cols[0]], map(myint,cols[1:]))
            else:
                sums[cols[0]] = map(myint,cols[1:])
        else:
            sums = sumarrays(sums, map(myint,cols))
        line = i.readline().rstrip()


    # then print the result
    if header:
        o.write(header + '\n')


    if isinstance(sums,dict):
        for attr in sums:
            o.write(','.join([attr] + map(str,sums[attr])) + '\n')
    else:
        o.write(','.join(map(str,sums)) + '\n')



def main(args):
    if (args and args[0] == '--doctest'):
        import doctest
        doctest.testmod()
    else:
        add(sys.stdin, sys.stdout)


if __name__ == '__main__':
    main(sys.argv[1:])

