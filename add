#!/usr/bin/env python3
#
#
desc="Calculate sum/avg/min/max or percentile of columns for CSV like data."

import math
import argparse
import re
import sys
from itertools import zip_longest

parser = argparse.ArgumentParser(description=desc)
parser.add_argument('filename', metavar='FILE', type=str, nargs='?')
parser.add_argument('-F', metavar='IFS', default=None,
        help='Input field separator, like awk (default: auto-detect)')
#parser.add_argument('--strict', dest='ignore_error', action='store_true', default=False,
#            help='Do not ignore malformed field in the input.')
#parser.add_argument('--ignore', action='store_true', default=False,
#            help='Ignore malformed field in the input.')
parser.add_argument('-H', '--no-header', action='store_false', dest='with_header', default=True,
        help='Do not print header')
parser.add_argument('-s', '--sum', dest='calc', action='append_const', const='sum',
        help='Calculate sum of the cells for columns. (default)')
parser.add_argument('-a', '--avg', dest='calc', action='append_const', const='avg',
        help='Calculate average of the cells for columns.')
parser.add_argument('--max', dest='percentile', action='append_const', const='100',
        help='Same as --percentile=100.')
parser.add_argument('--min', dest='percentile', action='append_const', const='0',
        help='Same as --percentile=0.')
parser.add_argument('-p', '--percentile', metavar='NUM', action='append', default=None,
        help='Calculate percentile NUM of the cells for columns.')
#parser.add_argument('-d', '--stddev', dest='calc', action='store_const', default=False,
#        help='Calculate standard deviation of the cells for columns.')


def isnum(string):
    return string.replace(".", "", 1).isdigit()

class BadLineError(Exception):
    pass

class BadCellError(Exception):
    pass

class EmptyCellError(Exception):
    pass



def guess_delimiter(line):
    if ',' in line:
        return ','
    elif '\t' in line:
        return '\t'
    elif ' ' in line:
        return ' +'
    else:
        return ','


class Tabulation(object):
    def __init__(self, firstline=None, delimiter=None,
                ignore=False, ignore_error=False, ignore_empty=True):
        """
        >>> t = Tabulation("1,2,3")
        >>> t.accum
        [[1], [2], [3]]
        """
        self.accum        = None
        self.delim        = None
        self.ignore       = ignore
        self.ignore_error = ignore_error
        self.ignore_empty = ignore_empty
        self.initialized  = False
        self.header       = None
        if firstline is not None:
            self._initialize(firstline, delimiter)
        else:
            self.delim = delimiter

    def _initialize(self, firstline, delimiter=None):
        if isinstance(firstline, list):
            if self.delim is None:
                self.delim = delimiter
            cols = firstline
        else:
            cols = self.split(firstline, delimiter)
        self.initialized = True

        # when first line is a non-number cell,
        # - it's header if there's only one column (len(cols)==1)
        # - it's attribute-name to be aggregated if there's more than 2 colums
        #   AND any of cols[1:] is non-number cell, it's header.
        if (len(cols)==1 and isnum(cols[0])) or \
            (len(cols)>1  and all(len(cols)>1 and [ isnum(x) for x in cols[1:] ])):
            self.header = None
            self.feed(cols)
        else:
            self.header = cols

    def multi_attribute(self):
        return isinstance(self.accum, dict)

    def split(self, line, delimiter=None):
        """
        >>> t = Tabulation(ignore_error=True)
        >>> t.split("foo,bar,baz")
        ['foo', 'bar', 'baz']
        >>> t.delim = None; t.split("foo bar   baz  ")
        ['foo', 'bar', 'baz']
        >>> t.delim = None; t.split("foo\tbar\tbaz")
        ['foo', 'bar', 'baz']
        >>> t.delim = ':'; t.split("foo:bar:baz")
        ['foo', 'bar', 'baz']
        """
        if delimiter is not None:
            self.delim = delimiter
        elif self.delim is None:
            self.delim = guess_delimiter(line)
        line = line.rstrip()
        return re.split(self.delim, line)

    def _combine(self, a, cell):
        """
        >>> t = Tabulation(ignore_error=True)
        >>> t._combine([1, 2], "3")
        [1, 2, 3]
        >>> t._combine([1, 2], "3.0")
        [1, 2, 3.0]
        >>> t._combine(None, "123")
        [123]
        >>> t._combine([1, 2], "broken")
        [1, 2]
        >>> t._combine(None, "broken")
        []
        """
        if cell is None:
            return a
        else:
            cell = cell.strip()
            if isnum(cell):
                if '.' in cell:
                    num = float(cell)
                else:
                    num = int(cell)
            elif cell == '':
                if self.ignore or self.ignore_empty:
                    num = None
                else:
                    raise EmptyCellError()
            else:
                if self.ignore or self.ignore_error:
                    num = None
                else:
                    raise BadCellError(cell)

            if num is None:
                if a is None:
                    return []
                else:
                    return a
            elif a is None:
                return [num]
            else:
                return a + [num]

    def feed(self, cols):
        """
        >>> t = Tabulation("1,2,3")
        >>> t.accum
        [[1], [2], [3]]
        >>> t.feed(["4","5","6"])
        >>> t.accum
        [[1, 4], [2, 5], [3, 6]]
        """
        if not self.initialized:
            self._initialize(cols)
        else:
            if self.accum is None:
                if isnum(cols[0]):
                    self.accum = [] # list of Column
                else:
                    self.accum = {} # dict of list of Column

            if isinstance(self.accum, dict):
                key = cols[0]
                cols = cols[1:]
                if key in self.accum:
                    self.accum[key] = [self._combine(a, b) for a, b in zip_longest(self.accum[key], cols)]
                else:
                    self.accum[key] = [self._combine(a, b) for a, b in zip_longest([], cols)]
            elif isinstance(self.accum, list):
                self.accum = [self._combine(a, b) for a, b in zip_longest(self.accum, cols)]
            else:
                raise Exception("You found a bug")


    def feedline(self, line, delimiter=None):
        """
        >>> t = Tabulation("1,2,3")
        >>> t.accum
        [[1], [2], [3]]
        >>> t.feedline("4,5,6")
        >>> t.accum
        [[1, 4], [2, 5], [3, 6]]
        >>> t = Tabulation("attr col1 col2")
        >>> t.feedline("foo 1 2")
        >>> t.feedline("bar 12 34")
        >>> t.feedline("foo 3 4")
        >>> t.feedline("bar 56 78")
        >>> t.header
        ['attr', 'col1', 'col2']
        >>> t.accum
        {'foo': [[1, 3], [2, 4]], 'bar': [[12, 56], [34, 78]]}
        """
        cols = self.split(line, delimiter)
        self.feed(cols)

    def calc(self, f):
        if isinstance(self.accum, dict):
            a = {}
            for i in self.accum:
                a[i] = list(map(f, self.accum[i]))
            return a
        elif isinstance(self.accum, list):
            return list(map(f, self.accum))
        else:
            return None

    def sum(self):
        """
        >>> t = Tabulation("1,2,3"); t.feedline("4,5,6"); t.feedline("7,8,9")
        >>> t.sum()
        [12, 15, 18]
        >>> t.avg()
        [4.0, 5.0, 6.0]
        >>> t = Tabulation("foo,1,2,3")
        >>> t.feedline("bar,4,5,6");  t.feedline("foo,7,8,9")
        >>> t.feedline("baz,7,6,5");  t.feedline("bar,3,2,1")
        >>> t.sum() == {'foo': [8, 10, 12], 'bar': [7, 7, 7], 'baz': [7, 6, 5]}
        True
        >>> t.avg() == {'foo': [4.0, 5.0, 6.0], 'bar': [3.5, 3.5, 3.5], 'baz': [7.0, 6.0, 5.0]}
        True
        """
        return self.calc(sum)

    def avg(self):
        return self.calc(lambda x: float(sum(x))/len(x))

    def percentile(self, num):
        if num >= 100:
            return self.calc(lambda x: sorted(x)[-1])
        elif num <= 0:
            return self.calc(lambda x: sorted(x)[0])
        else:
            return self.calc(lambda x:
                    sorted(x)[ int(math.ceil(len(x)/100.0*num)) - 1 ])


    def output(self, outfd, calc='sum', calc_arg=None,
                delimiter=None, align=None, print_header=True):
        """ FIXME: align not implemented yet.
        """
        if delimiter:
            ofs = delimiter
        elif self.delim and len(self.delim) == 1:
            ofs = self.delim
        else:
            ofs = ' '
            if align is None:
                align=True

        if calc == 'sum':
            s = self.sum()
        elif calc == 'avg':
            s = self.avg()
        elif calc == 'percentile':
            s = self.percentile(calc_arg)

        if self.header and print_header:
            outfd.write(ofs.join(self.header) + '\n')

        if isinstance(s, dict):
            for key in self.accum:
                outfd.write(ofs.join([key] + list(map(str, s[key]))) + '\n')
            return True
        elif isinstance(s, list):
            outfd.write(ofs.join(list(map(str,s))) + '\n')
            return True
        else:
            # empty input
            return False


def calc_lines(i, delimiter=None):
    t = Tabulation(delimiter=delimiter)
    for line in i:
        t.feedline(line)
    return t



def main(raw_args):
    if (raw_args and raw_args[0] == '--doctest'):
        import doctest
        doctest.testmod()
    else:
        args = parser.parse_args(raw_args)
        if args.filename:
            f = open(args.filename)
            t = calc_lines(f, args.F)
        else:
            t = calc_lines(sys.stdin, args.F)

        def maybe_print_stat_name(name):
            # Print name of stat iff more than one stat are specified.
            # Make it a new leftmost column if the input is single attribute values.
            # Make it like a section header if the input is multi-attribute.
            if len(args.percentile or []) + len(args.calc or []) <= 1:
                pass
            else:
                if t.multi_attribute():
                    sys.stdout.write("==== {} ====\n".format(name))
                else:
                    sys.stdout.write("{}{}".format(name, t.delim))

        if args.percentile or args.calc:
            for p in args.percentile or []:
                maybe_print_stat_name("p{}".format(p))
                ret = t.output(sys.stdout, 'percentile', float(p),
                         print_header=args.with_header)
            for c in args.calc or []:
                maybe_print_stat_name(c)
                ret = t.output(sys.stdout, c, print_header=args.with_header)
        else:
            # default is 'sum' as the name of this command suggests.
            ret = t.output(sys.stdout, 'sum', print_header=args.with_header)

        if ret:
            sys.exit(0)
        else:
            # Malformed or empty input
            sys.exit(1)


if __name__ == '__main__':
    main(sys.argv[1:])

