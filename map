#!/bin/bash
set -ue
trap 'echo "$0: Unexpected error at line $LINENO" >&2; exit 1;' ERR

b () { tput bold; echo -n "$*"; tput sgr0; } # bold
u () { tput smul; echo -n "$*"; tput rmul; } # underline

print_help () {
cat <<EOF
Usage: ${0##*/} $(u COMMAND) $(u ARGS...)
       ${0##*/} $(u COMMAND) $(u OPTIONS[...]) -- $(u ARGS...)
       ${0##*/} --help
Run COMMAND looping over ARGS.
Equivalent to:
    \$ for arg in ARGS...; do COMMAND arg; done
If a string '{}' is in OPTIONS, it will be replaced with argument, instead of
having an argument added to the end of OPTIONS:
    \$ for arg in ARGS...; do COMMAND \${OPTIONS//{}/\$arg}; done
If separator '--' is omitted, all arguments after second one will be treated
as arguments.
$(b OPTIONS)
  -h,--help           Print this help.
  -j,--jobs=$(u NUM)  Run maximum NUM jobs in parallel (default=1).
$(b NOTES)
  This command is wrapper of $(b para -b --map -j1).
  See $(b para --help) for more detail.
EOF
}

if [ $# -eq 1 ]
then
    case $1 in
        -h|--help) print_help; exit 0 ;;
    esac
fi

exec ${0%/*}/para -b --map "$@"
