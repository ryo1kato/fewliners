#!/usr/bin/env python

desc="Plot histogram from CSV file"

import argparse
import sys, os
import re
import math
import numpy as np
import pandas as pd
import gzip

STATS=['total', 'count', 'avg', 'sigma', 'p0', 'p10', 'p50', 'p90', 'p99', 'p99.9', 'p99.99', 'p100']

parser = argparse.ArgumentParser(description=desc)
parser.add_argument('filenames', metavar='FILE', type=str, nargs='*', help=argparse.SUPPRESS)
parser.add_argument('-d', '--delimiter', metavar='DELIM', default=',',
        help='Use DELIM as a input field separator. (default=",")')
parser.add_argument('-c', '--column', metavar='FIELD', default=None, type=int,
        help='Column number to compute perentile from (default: rightmost column)')
parser.add_argument('--min', metavar='MIN', default=None, type=float,
        help='clip the data with MIN')
parser.add_argument('--max', metavar='MAX', default=None, type=float,
        help='clip the data with MAX')
parser.add_argument('-C','--csv', action='store_true', default=False,
        help='output in CSV format')
parser.add_argument('-H','--no-header', action='store_true',
        help='Input file does not contain a header line')
parser.add_argument('-N','--no-csv-header', action='store_true',
        help='Do not print header when output in CSV format')
# FIXME
parser.add_argument('-s', '--stat', '--stats', '-p', '--percentile', default=None, type=str,
        help='Specify list of statistical values to output.'
             'default is {}'.format(STATS))
# FIXME: human readable

def die(msg, errcode=1):
    sys.stderr.write('ERROR: ' + msg + '\n')
    sys.exit(errcode)

def warn(msg):
    sys.stderr.write('WARNING: ' + msg + '\n')

def open_and_read_file(fname=None, delimiter=',', header=None):
    if not fname or fname == '-':
        f = sys.stdin
        fname = '(stdin)'
    else:
        if fname.endswith('.gz'):
            f = gzip.open(fname)
        else:
            f = open(fname)
    df = pd.read_csv(f, delimiter=delimiter, header=header)
    df.name = fname
    return df


def getstat(a, s='avg'):
    if s in ['avg', 'average', 'mean']:
        return a.values.mean()
    elif s == 'total' or s == 'sum':
        return a.values.sum()
    elif s == 'count' or s == 'n':
        return len(a.values)
    elif s in ['stddev', 'stdev', 'sigma']:
        return a.values.std()
    elif s[0] == 'p':
        return np.percentile(a, float(s[1:]))
    else:
        raise Exception("cannot interpret string '{}'".format(s))


def main(args):
    if args.stat:
        stats = args.stat.split(',')
    else:
        stats = STATS

    if args.csv and not args.no_csv_header:
        print(args.delimiter.join(stats))

    for fname in args.filenames or ['-']:
        if args.no_header:
            header = None
        else:
            header = 'infer'
        df = open_and_read_file(fname, args.delimiter, header)

        if args.column:
            nth = args.column
            if nth > len(df.columns):
                die("Invalid column position {} for --column; "
                    "the input '{}' contains only {} columns\n".format(nth, df.name, len(df.columns)))
        else:
            nth = len(df.columns)

        data = df.iloc[:,[nth-1]]
        header = str(data.columns[0])
        if not args.no_header and re.match('\s*-?[0-9]+(.[0-9]+)?', header):
            warn("First line of the column looks like a datum ('{}') but ignored as a header. Use --no-header to not ignore.".format(header))

        if args.csv:
            print(args.delimiter.join(["{:g}".format(getstat(data,s)) for s in stats]))
        else:
            for s in stats:
                print("{:6s}: {:g}".format(s, getstat(data, s)))


if __name__ == '__main__':
    main(parser.parse_args(sys.argv[1:]))
