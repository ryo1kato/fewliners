#!/bin/bash
#
# para - poor man's parallelizer
#
set -ue
trap 'echo "$0: Unexpected error at line $LINENO" >&2; exit 1;' ERR

b () { tput bold; echo -n "$*"; tput sgr0; } # bold
u () { tput smul; echo -n "$*"; tput rmul; } # underline

print_help () {
cat <<EOF
Usage: ${0##*/} [$(u OPTIONS)...] $(u COMMAND) [$(u ARG)...] < $(u PARAM_FILE)
       ${0##*/} [$(u OPTIONS)...] --map $(u COMMAND) $(u PARAM)...]
       ${0##*/} [$(u OPTIONS)...] --map $(u COMMAND) [$(u ARG)...] -- $(u PARAM)...]
A simpler GNU parallel like shell command parallelizer, implemented with Bash.
 For each line of $(u PARAM_FILE), run $(u COMMAND) [$(u ARG)...] with every occurrence of $(b {})
 replaced with the content of the line. If $(u ARG) is ommited, single $(b {}) is assumed.
 With $(b --map), use params from positional arguments after '--' instead of reading from stdin.
$(b OPTIONS)
-j,--jobs=$(u NUM)     Run maximum $(u NUM) jobs in parallel
                  default is 1 for --map; othersize $opt_jobs.
                  You can override the default with $(u \$PARA_JOBS) env variable.)
-h,--help         Print this help.
-b,--buffered     Buffer all outputs from $(u COMMAND) before print to terminal.
                  Prevents inter-mixed output, but needs as much RAM
-o,--output=$(u FILE)  Redirect command output to $(u FILE)
                  If placeholder(s) $(b {}) is contained in $(u FILE),
                  output will be separated per commands, with $(b {}) substitued.
                  Otherwise all outputs will be sent to one file $(u FILE).
-a,--append       Append, rather than overwrite $(u FILE).
-e,--error        Immediately exit when $(b observing) any error.
                  Because commands are ran in parallel, this option doesn't
                  necessarily stop commands following the one failed from being
                  executed.
-v,--verbose      Print command strings being executed to stderr.
                  -vv will print start and end of command, with run time.
$(b EXAMPLES)
  Following five command lines are roughly equivalent:
    $ for file in file1.zip file2.zip file3.zip; do unzip \$file; done
    $ printf 'file1.zip$(b \\n)file2.zip$(b \\n)file3.zip$(b \\n)' | para unzip
    $ printf 'file1.zip$(b \\n)file2.zip$(b \\n)file3.zip$(b \\n)' | para unzip {}
    $ para --map unzip file1.zip file2.zip file3.zip
    $ para --map unzip {} -- file1.zip file2.zip file3.zip
  If you want to use redirect, pipe or other shell meta charactor / function,
  quote as a single $(u ARG) and pass it to $(b sh -c):
    $ para sh -c 'mycommand {} < {}-input.txt | grep keyword > {}-output.txt' \\
          < param_list_file
$(b RETURN CODE)
  Exits with code 0 if all of the commands ran exitted successfully.
  Otherwise print number of commands exitted with non-zero code to stderr,
  and exits with code 1.  For bash older than ver4.3, errors are ignored,
  and as such, '--error' option doesn't work.
$(b BUGS)
  Unlike GNU parallel, this command doesn't support reading from multiple
  files and placeholder variants like {.}, {/}, {1}, {2}, etc.
EOF
}


###############################################################################
WARN () { echo "WARN: ${0##*/}: $@" >&2; }
ERROR () { echo "ERROR: ${0##*/}: $@" >&2; }
DIE () { ERROR "$*"; exit 1; }

enabled () {
    [ "$1" == 'yes' ]
}


bash_is_old='no';
case $BASH_VERSION in
[123].*|4.[012].*)
    if [ $BASH = /bin/bash -a -x /usr/local/bin/bash ]
    then
        # MacOSX users might have newer version of bash in /usr/local/bin with brew
        exec /usr/local/bin/bash "$0" "$@"
    fi
    WARN "Your bash is too old ($BASH_VERSION). Errors will be ignored."
    bash_is_old='yes';
    ;;
esac


############################################################################
##
## Commandline Parser
##

opt_verbose=0
opt_jobs=${PARA_JOBS:-8}
opt_print='no'
opt_append='no'
opt_error='no'
opt_buffer='no'
opt_mapmode='no'
opt_output=''


while [ $# -ge 1 ]
do
case $1 in
    -j[1-9]|-j[1-9][0-9]|-j[1-9][0-9][0-9])
        opt_jobs=${1#-j};;
    -[^-][^-]*)
        # expand '-abcd' to '-a -bcd' (and eventually '-a -b -c -d')
        firstarg="$1"; shift
        set -- "${firstarg:0:2}" "-${firstarg:2}" "$@"; continue;;
    --*=*)
        firstarg="$1"; shift;
        set -- "${firstarg%%=*}" "${firstarg#*=}" "$@"; continue;;
    -j|--jobs)       opt_jobs="$2"; shift;;
    -b|--buffered)   opt_buffer='yes';;
    --map)           opt_mapmode='yes';;
    -h|--help)       print_help; exit 0;;
    -o|--output)     opt_output="$2"; shift;;
    -a|--append)     opt_append="$2"; shift;;
    -e|--error)      opt_error='yes';;
    -v|--verbose)    let opt_verbose++ || true;;
    --) shift; break;;
    -*) DIE "Unknown option '$1'";;
    *) break;;
esac
shift
done

[ $# -lt 1 ] && DIE "Too few arguments"

output_per_command='no'
case "$opt_output" in
    '')     : ;;
    *'{}'*) output_per_command='yes'
            opt_buffer='no'
            ;;
    *)
        if enabled $opt_append
        then
            touch "${opt_output}"
        else
            install -m 644 -D /dev/null "${opt_output}"
        fi
esac

max_jobs=$opt_jobs
(( max_jobs > 1 )) || max_jobs=1




############################################################################
##
## Interruption and Termination Handling
##


kids_comma () {
    jobs -p | tr '\n' ',' | sed -e 's/,$//'
}

grandkids () {
    kids=$(kids_comma)
    if [ -n "$kids" ]
    then
        pgrep -d ' ' -P $kids || true
    fi
}

kill_grandkids () {
    kids=$(kids_comma)
    if [ -n "$kids" ]
    then
        pkill "$@" -P $(kids_comma) $kids || true
    fi
}


interrupted='no'
term_and_wait_jobs () {
    trap 'echo "Sending SIGKILL to ..."; kill_grandkids -KILL' QUIT
    trap - INT TERM

    #kill_grandkids

    sleep 1
    if [ -n "$(jobs -p)" ]
    then
        local rem_jobs=($(jobs -p))
        WARN "You still have ${#rem_jobs[@]} jobs running. (${rem_jobs[@]})"
        cat /proc/$rem_jobs/cmd
        WARN "Hit $(b Ctrl-C) again to exit without waiting. $(b Ctrl-\\) to send SIGKILL to all descendants."
    fi

    while [ -n "$(jobs -p)" ]
    do
        wait
    done
    WARN "All jobs and subprocesses exitted."
    exit 1
}

#trap 'WARN "Interrupted"; interrupted=yes' INT TERM

############################################################################
##
## The Parallelizer
##

wait_for_lower_parallelism () {
    while true
    do
        jobs > /dev/null # work around mysterious bug for bash < 4.1
        jobs=($(jobs -p))
        nr_jobs=${#jobs[@]}
        if (( max_jobs > nr_jobs ))
        then
            break
        else
            if enabled "$bash_is_old"
            then
                sleep 0.1
            else
                wait -n || (( ++errors ))
                break
            fi
        fi
    done
}


errors=0
nth=1
launch_one_job () {
    local outfile
    local param="$1"

    wait_for_lower_parallelism

    #if [ $interrupted = yes ]
    #then
    #    term_and_wait_jobs
    #    exit 1
    #fi

    if [ $errors -gt 0 -a $opt_error = 'yes' ]
    then
        DIE "Exitting with an error, as --error option is given."
    fi

    if (( opt_verbose > 0 )) ; then
        echo "[$nth] ${cmd[@]//\{\}/$param}" >&2
    fi
    (
        set +e
        time_start=$SECONDS

        if enabled $opt_buffer
        then
            # Note that if $output_per_command is 'yes', $opt_buffer is 'no'
            output=$("${cmd[@]//\{\}/$param}")
            if [ -n "$opt_output" ]
            then
                echo "$output" >> "$opt_output"
            else
                if [ -n "$output" ]
                then
                    echo "$output"
                fi
            fi
        elif enabled $output_per_command
        then
            outfile="${opt_output//\{\}/$param}"
            if enabled $opt_append
            then
                touch "$outfile"
            else
                install -m 644 -D /dev/null "$outfile"
            fi
            "${cmd[@]//\{\}/$param}" >> "$outfile"
        elif [ -n "$opt_output" ]
        then
            "${cmd[@]//\{\}/$param}" >> "${opt_output}"
        else
            "${cmd[@]//\{\}/$param}"
        fi
        ret=$?

        time_end=$SECONDS
        if (( opt_verbose > 1 )) ; then
            echo "[$nth] ${cmd[@]//\{\}/$param} FINISHED in $((time_end - time_start)) secs" >&2
        fi
        exit $ret
    ) &

    let nth++
}


if enabled $opt_mapmode
then
    cmd=()

    while [ $# -gt 0 ]
    do
        case $1 in
            --) shift; break;;
            *) cmd+=("$1")
        esac
        shift
    done

    if [ $# -eq 0 ]
    then
        # No -- delimitor; assuming only first argument is command part
        # and all the rest are arguments to iterate over.
        set "${cmd[@]}"
        cmd=("$1")
        shift
    fi
    parameters=("$@")
else
    cmd=("$@")
fi

case "${cmd[*]}" in
    *{}*) : ;;
    *) cmd+=('{}');;
esac

if enabled $opt_mapmode
then
    for param in "${parameters[@]}"
    do
        launch_one_job "$param"
    done
else
    while IFS='' read -r line
    do
        launch_one_job "$line"
    done
fi



# This waits for any remaining job.
if enabled "$bash_is_old"
then
    wait
else
    while [ "$(jobs -p)" != '' ]
    do
        if ! wait -n
        then
            if enabled $opt_error
            then
                DIE "Exitting with an error, as --error option is given."
            else
                let ++errors
            fi
        fi
    done
fi

if (( errors > 0 ))
then
    WARN "Had $errors errors."
    exit 1
else
    exit 0
fi
