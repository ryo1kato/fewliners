#!/bin/bash
#
# Dumb wrapper to plot two-column CSV in gnuplot
#
set -ue
trap 'echo "$0: Unexpected error at line $LINENO" >&2; exit 1;' ERR

print_help () {
cat <<EOF
Usage: ${0##*/} [OPTIONS...] [CSV_FILE...]
  GNU Plot wrapper for two-column CSV files.
  If no CSV_FILE argument is given, try to read from stdin.
OPTIONS
  -o,--output=FILE     Output to FILE in PNG format.
  -t,--terminal=TERM   Set terminal type.
  -s,--setting=STRING  Additional gnuplot commands.
  -h,--help            Print this help.
EXAMPLE
  cat data.csv | gnuplot-xy-csv
  gnuplot-xy-csv -s 'set yrange [0:36]' *.csv
EOF
}

###############################################################################
ERROR () { echo "ERROR: $0: $*" >&2; }
DIE () { ERROR "$*"; exit 1; }


opt_input="-" # default is stdin
opt_output="" # default is screen
opt_terminal=""
opt_setting=""
while [ $# -ge 1 ]
do
case $1 in
    -[^-][^-]*)
        # expand '-abcd' to '-a -bcd' (and eventually '-a -b -c -d')
        firstarg="$1"; shift
        set -- "${firstarg:0:2}" "-${firstarg:2}" "$@"; continue;;
    --*=*)
        firstarg="$1"; shift;
        set -- "${firstarg%%=*}" "${firstarg#*=}" "$@"; continue;;
    -o|--output)  opt_output="$2"; shift;;
    -s|--setting) opt_setting=$2; shift;;
    -t|--terminal) opt_terminal="$2"; shift;;
    -h|--help)    print_help; exit 0;;
    --) shift; break;;
    -*) DIE "Unknown option '$1'";;
    *) opt_input="$1"; break;;
esac
shift
done

if [ $# -eq 0 ] || [ $1 = - ]; then
    input=('/dev/stdin')
else
    input=("$@")
fi

if [ -z "${opt_output:-}" ]
then
    persist='-persist'
else
    persist=''
fi

plotargs=()
for file in "${input[@]}"
do
    plotargs+="'$file' using '%lf,%lf' title '$file',"
done

gnuplot $persist -e "${opt_setting:+"$opt_setting;"}${opt_terminal:+"set terminal $opt_terminal;"}${opt_output:+"set terminal png; set output '$opt_output';"}; plot ${plotargs[*]%,}"

